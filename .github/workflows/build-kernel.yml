name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:
     inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'https://codeberg.org/LeviMarvin/kernel_xiaomi_alioth.git'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'talon'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'alioth_lmperf_defconfig'
      KERNEL_FILE:
        description: 'Your kernel out image name'
        required: true
        default: 'Image'
      CLANG_VERSION:
        description: 'Clang version'
        required: true
        default: 'r450784d'
      BUILD_EXTRA_COMMAND:
        description: 'Extra build commands(e.g. LLVM=1 LLVM_IAS=1)'
        required: false
        default: 'LD=ld.lld'
      USE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: 'true'
        type: boolean
      USE_KPROBES:
        description: 'Use Kprobes'
        required: false
        default: 'true'
        type: boolean
      OS_TYPE:
        description: 'Os Type'
        required: false
        default: 'miui'
      HARDWARE_CODE:
        description: 'Hardware Vendor Name'
        required: false
        default: 'qcom'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - uses: actions/checkout@v3
    - name: Setup Configuration
      run: |
        if [ $(cat config.env | grep "USE_CONFIG" | head -n 1 | cut -d "=" -f 2) = true ];then
            echo "KERNEL_SOURCE=$(cat config.env | grep "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_DEFCONFIG=$(cat config.env | grep "KERNEL_DEFCONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_FILE=$(cat config.env | grep "KERNEL_FILE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "CLANG_VERSION=$(cat config.env | grep "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=$(cat config.env | grep "EXTRA_BUILD_COMMAND" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            echo "USE_KERNELSU=$(cat config.env | grep "USE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "USE_KPROBES=$(cat config.env | grep "USE_KPROBES" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "OS_TYPE=$(cat config.env | grep "OS_TYPE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "HARDWARE_CODE=$(cat config.env | grep "HARDWARE_CODE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        else
            echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
            echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
            echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
            echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV
            echo "CLANG_VERSION=${{ github.event.inputs.CLANG_VERSION }}" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=${{ github.event.inputs.BUILD_EXTRA_COMMAND }}" >> $GITHUB_ENV
            echo "USE_KERNELSU=${{ github.event.inputs.USE_KERNELSU }}" >> $GITHUB_ENV
            echo "USE_KPROBES=${{ github.event.inputs.USE_KPROBES }}" >> $GITHUB_ENV
            echo "OS_TYPE=${{ github.event.inputs.OS_TYPE }}" >> $GITHUB_ENV
            echo "HARDWARE_CODE=${{ github.event.inputs.HARDWARE_CODE }}" >> $GITHUB_ENV
        fi

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Download Clang-aosp and Gcc-aosp
      run: |
        cd $GITHUB_WORKSPACE && mkdir kernel_workspace && cd kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz
        mkdir gcc-aosp
        wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-11.0.0_r35.tar.gz
        tar -C gcc-aosp/ -zxvf android-11.0.0_r35.tar.gz

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1

    - name: Setup KernelSU
      if: env.USE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        if [ ${{ env.USE_KPROBES }} = true ]; then
            echo "CONFIG_MODULES=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
            echo "CONFIG_KPROBES=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        fi
        echo "ANYKERNELNAME=-KernelSU" >> $GITHUB_ENV

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        make -j$(nproc --all) O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-aosp/bin/aarch64-linux-android- CC=clang ${{ env.BUILD_EXTRA_COMMAND }} ${{ env.KERNEL_DEFCONFIG }}
        make -j$(nproc --all) O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-aosp/bin/aarch64-linux-android- CC=clang ${{ env.BUILD_EXTRA_COMMAND }}

    - name: Make Anykernel for your kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone git@github.com:denislov/anykernel3.git
        cp android-kernel/out/arch/arm64/boot/${{ env.KERNEL_FILE }} anykernel3/kernels/${{ env.OS_TYPE }}/
        cp android-kernel/out/arch/arm64/boot/dtbo.img anykernel3/kernels/${{ env.OS_TYPE }}/
        find android-kernel/out/arch/arm64/boot/dts/${{ env.HARDWARE_CODE }} -name '*.dtb' -exec cat {} + > anykernel3/kernels/${{ env.OS_TYPE }}/
        rm -rf AnyKernel3/.git* anykernel3/README.md

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v3
      with:
        name: AnyKernel3${{ env.ANYKERNELNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*
